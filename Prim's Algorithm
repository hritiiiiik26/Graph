import java.util.*;
class prim{
    public static void main(String[] args){
        int graph[][] = new int[][] { { 0, 5, 8, 0}, 
                                      { 5, 0, 10, 15 }, 
                                      { 8, 10, 0, 20 }, 
                                      { 0, 15, 20, 0 },}; 

       System.out.print(primMST(graph));
    }

    static final int V=4;
	public static int primMST(int graph[][]) 
    { 
     int key[]=new int[V];
     int res=0;
     Arrays.fill(key,Integer.MAX_VALUE);   //we will make use of this extra space to store the possible weights.
     boolean mst[]= new boolean[V];        // this tells us if we have already visited an edge.
     key[0]=0; 
     for(int count=0;count<V;count++){
         int u=-1;
         for(int i=0;i<V;i++) if(!mst[i]&&(u==-1 || key[i]<key[u]))
            u=i;
         mst[u]=true;
         res+=key[u];   // for finding spanning tree having minimum total weight

         for(int v=0;v<V;v++) if(graph[u][v]!=0 && !mst[v])
              key[v]=Math.min(key[v],graph[u][v]);  //for finding the smaller weight of the two possible weights.
     }
     return res;
    }
}
